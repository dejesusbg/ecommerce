services:
  keycloak:
    image: quay.io/keycloak/keycloak:23.0.3 # Using the specified recent stable version
    container_name: keycloak
    command: ['start-dev'] # For development
    environment:
      KEYCLOAK_ADMIN: admin # Admin username
      KEYCLOAK_ADMIN_PASSWORD: admin # Admin password
      # KC_DB: postgres
      # KC_DB_URL_HOST: keycloak-db
      # KC_DB_URL_DATABASE: keycloak
      # KC_DB_USERNAME: keycloak
      # KC_DB_PASSWORD: password
      # KC_PROXY: edge # Uncomment if Keycloak is behind a reverse proxy that terminates TLS
      # KC_HOSTNAME_STRICT: false # Useful for development with non-standard hostnames
      # KC_HTTP_ENABLED: true # Useful if not using TLS for Keycloak itself in dev
      KC_HOSTNAME_URL: http://localhost:8180 # Define if Keycloak needs to know its external URL, adjust if gateway changes it
      # KC_HEALTH_ENABLED: true
      # KC_METRICS_ENABLED: true
    ports:
      - '8180:8080' # Host port : Container port (Keycloak's default HTTP port)
      - '8543:8443' # Host port : Container port (Keycloak's default HTTPS port, if used)
    # volumes: # Optional: For persisting data or custom themes/providers
    #   - ./keycloak_data:/opt/keycloak/data # Example for H2 data persistence (start-dev uses /opt/keycloak/data/h2)
    #   - ./keycloak_realms_export:/opt/keycloak/data/import # For realm import on startup
    networks:
      - microservices-network

  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    networks:
      - microservices-network

  mongo:
    image: mongo:6.0
    container_name: mongo
    ports:
      - '27017:27017'
    volumes:
      - mongo-data:/data/db
    networks:
      - microservices-network

  inventory-db:
    image: postgres:15-alpine
    container_name: inventory-db
    ports:
      - '5433:5432'
    environment:
      POSTGRES_DB: inventorydb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - inventory-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network

  order-db:
    image: postgres:15-alpine
    container_name: order-db
    ports:
      - '5434:5432'
    environment:
      POSTGRES_DB: orderdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - order-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network

  payment-db:
    image: postgres:15-alpine
    container_name: payment-db
    ports:
      - '5435:5432'
    environment:
      POSTGRES_DB: paymentdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - payment-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network

  discovery-service:
    build: ./discovery-service
    container_name: discovery-service
    ports:
      - '8761:8761'
    environment:
      SPRING_APPLICATION_NAME: discovery-service
      SERVER_PORT: 8761
      # EUREKA_CLIENT_REGISTER_WITH_EUREKA: "false" # Already in its application.properties
      # EUREKA_CLIENT_FETCH_REGISTRY: "false" # Already in its application.properties
    networks:
      - microservices-network

  product-service:
    build: ./product-service
    container_name: product-service
    ports:
      - '8081:8081'
    environment:
      SPRING_APPLICATION_NAME: product-service
      SPRING_DATA_MONGODB_URI: mongodb://mongo:27017/productdb
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      SPRING_DATA_REDIS_HOST: redis
      SERVER_PORT: 8081
    depends_on:
      - mongo
      - discovery-service
    networks:
      - microservices-network

  inventory-service:
    build: ./inventory-service
    container_name: inventory-service
    ports:
      - '8082:8082'
    environment:
      SPRING_APPLICATION_NAME: inventory-service
      SPRING_DATASOURCE_URL: jdbc:postgresql://inventory-db:5432/inventorydb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      SERVER_PORT: 8082
    depends_on:
      - inventory-db
      - discovery-service
    networks:
      - microservices-network

  order-service:
    build: ./order-service
    container_name: order-service
    ports:
      - '8083:8083'
    environment:
      SPRING_APPLICATION_NAME: order-service
      SPRING_DATASOURCE_URL: jdbc:postgresql://order-db:5432/orderdb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      SERVER_PORT: 8083
      # Feign client URLs are typically service discovery driven, so not set here
    depends_on:
      - order-db
      - discovery-service
      - product-service # Depends on product and inventory services via Feign
      - inventory-service
    networks:
      - microservices-network

  payment-service:
    build: ./payment-service
    container_name: payment-service
    ports:
      - '8084:8084'
    environment:
      SPRING_APPLICATION_NAME: payment-service
      SPRING_DATASOURCE_URL: jdbc:postgresql://payment-db:5432/paymentdb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      SERVER_PORT: 8084
    depends_on:
      - payment-db
      - discovery-service
    networks:
      - microservices-network

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - '8080:8080' # Main entry point for users
    environment:
      SPRING_APPLICATION_NAME: api-gateway
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      SPRING_DATA_REDIS_HOST: redis
      SERVER_PORT: 8080
      # Ensure resilience4j fallback URIs are internal if they call other gateway paths
    depends_on:
      - discovery-service
      - keycloak
      - product-service
      - inventory-service
      - order-service
      - payment-service
      - redis # For caching filter
    networks:
      - microservices-network

  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./observability/prometheus:/etc/prometheus
      - prometheus-data:/prometheus # Persistent data
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - microservices-network
    depends_on:
      - api-gateway
      - product-service
      - order-service
      - inventory-service
      - payment-service
      - discovery-service

  grafana:
    image: grafana/grafana:10.2.2
    container_name: grafana
    ports:
      - '3000:3000'
    volumes:
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana # Persistent data
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - microservices-network
    depends_on:
      - prometheus
      - loki

  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    ports:
      - '3100:3100' # HTTP port
    volumes:
      - ./observability/loki:/etc/loki
      - loki-data:/loki # Persistent data
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge

volumes:
  redis-data:
  prometheus-data: {} # Define persistent volume
  grafana-data: {} # Define persistent volume
  loki-data: {}
  mongo-data: {}
  inventory-db-data: {}
  order-db-data: {}
  payment-db-data: {}
