version: '3.8'

services:
  # Servidor Eureka (versi√≥n oficial simplificada)
  eureka-server:
    build:
      context: ./eureka-server
    container_name: eureka-server
    ports:
      - '8761:8761'
    networks:
      - microservices-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8761/actuator/health']
      interval: 10s
      timeout: 5s
      retries: 3

  api-gateway:
    build:
      context: ./api-gateway
      # JAR_FILE arg removed as Dockerfile now handles it
    ports:
      - '8080:8080'
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_SERVER_URL=http://eureka-server:8761/eureka/
      # Add any other necessary environment variables
    depends_on:
      eureka-server:
        condition: service_healthy
      product-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      inventory-service:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/actuator/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_PASSWORD: 123123
      POSTGRES_USER: postgres
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5

  product-service:
    build:
      context: ./product-service
      # JAR_FILE arg removed
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_SERVER_URL=http://eureka-server:8761/eureka/
      - SPRING_DATA_MONGODB_URI=mongodb://mongo:27017/product_db
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
    ports:
      - '8086:8086'
    depends_on:
      eureka-server:
        condition: service_healthy
      mongo:
        condition: service_started # Or service_healthy if a healthcheck is added to mongo
      redis:
        condition: service_started # Or service_healthy if a healthcheck is added to redis
    networks:
      - microservices-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8086/actuator/health']
      interval: 30s
      timeout: 10s
      retries: 3

  payment-service:
    build:
      context: ./payment-service
      # JAR_FILE arg removed
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_SERVER_URL=http://eureka-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/payment_db
    ports:
      - '8085:8085'
    depends_on:
      - eureka-server
      - postgres
    networks:
      - microservices-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8085/actuator/health']
      interval: 30s

  order-service:
    build:
      context: ./order-service
      # JAR_FILE arg removed
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_SERVER_URL=http://eureka-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/order_db
    ports:
      - '8084:8084'
    depends_on:
      - eureka-server
      - postgres
    networks:
      - microservices-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8084/actuator/health']
      interval: 30s

  inventory-service:
    build:
      context: ./inventory-service
      # JAR_FILE arg removed
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_SERVER_URL=http://eureka-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/inventory_db
    ports:
      - '8083:8083'
    depends_on:
      - eureka-server
      - postgres
    networks:
      - microservices-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8083/actuator/health']
      interval: 30s

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - '8088:8080' # Remapped Keycloak to 8088 to avoid conflict with api-gateway
    command:
      - start-dev

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - '27017:27017'
    volumes:
      - mongo_data:/data/db
    networks:
      - microservices-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - '6379:6379'
    networks:
      - microservices-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - microservices-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - '3100:3100'
    # volumes: # Optional: Mount a custom config if needed
    #   - ./config/loki/loki-config.yml:/etc/loki/config.yml
    networks:
      - microservices-network
    command:
      - '-config.file=/etc/loki/local-config.yaml' # Uses default config inside the container if no volume mounted

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning/:/etc/grafana/provisioning/
    networks:
      - microservices-network
    depends_on:
      - prometheus
      - loki

networks:
  microservices-network:
    driver: bridge

volumes:
  postgres_data:
  mongo_data:
  grafana_data:
