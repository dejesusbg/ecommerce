import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

import I18nProviderWrapper from './I18nProvider'; // Corrected path

export const metadata: Metadata = {
  title: "Create Next App", // This could also be localized, but typically done in page.tsx or with a dynamic approach
  description: "Generated by create next app", // Same as title
};

export default function RootLayout({
  children,
  params, // Next.js 13+ passes params including locale if using [locale] segment in path
}: Readonly<{
  children: React.ReactNode;
  params?: { locale?: string }; // Make params optional or ensure it's always there
}>) {
  // The lang attribute on <html> will ideally be set by Next.js's i18n routing
  // or a client component that observes i18n.language.
  // For now, removing hardcoded "en".
  // If params.locale is available, it could be used, but I18nProvider handles language detection.
  return (
    // Ensure params object and params.locale are accessed safely if used
    // <html lang={params?.locale || 'en'} dir={params?.locale === 'ar' ? 'rtl' : 'ltr'}>
    <html>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 text-gray-100 min-h-screen`}
      >
        <I18nProviderWrapper>{children}</I18nProviderWrapper>
      </body>
    </html>
  );
}
